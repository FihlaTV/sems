From a8e16f8a335df4ac4860056f26461cb6f805d071 Mon Sep 17 00:00:00 2001
From: Stefan Sayer <stefan.sayer@googlemail.com>
Date: Wed, 14 Aug 2013 18:00:58 +0200
Subject: [PATCH] core: added AmUriParser functions to bring inline with 1.6

relevant commits:
28dd1a8 added method to print canonical URI
e2cb88c c/f: return value of skip_name() is signed, size_t is not.
01c4e1c sbc: first REGISTER cache draft
c39cd27 generic request forwarding (WIP 2)
786a59a added add_param_to_param_list(), add_user_param() and print() methods
e9f988c b/f: parsing issue in AmUriParser when dealing with parameters in the username part (bug # 81)
01b2796 sbc: added support for R-URI host modification
20d7bef b/f: fix display name replacements, $fn/$tn etc

plus tests
---
 core/AmUriParser.cpp          |  170 +++++++++++++++++++++++++++++++++++------
 core/AmUriParser.h            |   20 ++++-
 core/tests/sems_tests.cpp     |    1 +
 core/tests/test_uriparser.cpp |  114 +++++++++++++++++++++++++++
 4 files changed, 280 insertions(+), 25 deletions(-)
 create mode 100644 core/tests/test_uriparser.cpp
 create mode 100644 core/tests/test_uriparser.h

diff --git a/core/AmUriParser.cpp b/core/AmUriParser.cpp
index f67e324..7f156bb 100644
--- a/core/AmUriParser.cpp
+++ b/core/AmUriParser.cpp
@@ -163,14 +163,14 @@ static inline int skip_uri(const string& s, unsigned int pos)
 enum {
   uS0=       0, // start
   uSPROT,       // protocol
-  uSUHOST,      // user / host
+  uSUSER,       // user 
   uSHOST,       // host
   uSHOSTWSP,    // wsp after host
   uSPORT,       // port
   uSPORTWSP,    // wsp after port
   uSHDR,        // header
   uSHDRWSP,     // wsp after header
-  uSPARAM,      // params 
+  uSPARAM,      // params
   uSPARAMWSP,   // wsp after params
   uS6           // end
 };
@@ -183,7 +183,7 @@ bool AmUriParser::parse_uri() {
   size_t pos = 0; int st = uS0;
   size_t p1 = 0; 
   int eq = 0; const char* sip_prot = "SIP:";
-  uri_user = ""; 	uri_host = ""; uri_port = ""; uri_param = ""; 
+  uri_user = ""; uri_host = ""; uri_port = ""; uri_param = "";
 
   if (uri.empty())
     return false;
@@ -199,24 +199,18 @@ bool AmUriParser::parse_uri() {
 	if ((eq<=4)&&(toupper(c) ==sip_prot[eq])) 
 	  eq++; 
 	if (eq==4) { // found sip:
-	  st = uSUHOST; p1 = pos;
+	  uri.find('@', pos+1) == string::npos? st = uSHOST : st = uSUSER; p1 = pos;
 	};
       } break;
       }; 
     } break;
     case uSPROT: { 
-      if (c ==  ':')  { st = uSUHOST; p1 = pos;} 
+      if (c ==  ':')  { uri.find('@', pos+1) == string::npos? st = uSHOST : st = uSUSER; p1 = pos;} 
     } break;
-    case uSUHOST: {
+    case uSUSER: {
       switch(c) {
       case '@':  { uri_user = uri.substr(p1+1, pos-p1-1);
 	  st = uSHOST; p1 = pos; }; break;
-      case ':': { uri_host = uri.substr(p1+1, pos-p1-1);
-	  st = uSPORT; p1 = pos;  }; break;
-      case '?': { uri_host = uri.substr(p1+1, pos-p1-1);
-	  st = uSHDR;  p1 = pos; }; break;
-      case ';': { uri_host = uri.substr(p1+1, pos-p1-1);
-	  st = uSPARAM;p1 = pos; }; break;
       case '>': { uri_host = uri.substr(p1+1, pos-p1-1);
 	  st = uS6;    p1 = pos; }; break;
       };
@@ -298,13 +292,14 @@ bool AmUriParser::parse_uri() {
       switch (c) {
       case '>': { st = uS6; p1 = pos; } break;
       };
-    } break; 
+    } break;
+
     };
     //    DBG("(2) c = %c, st = %d\n", c, st);
     pos++;
   }
   switch(st) {
-  case uSUHOST:
+  case uSUSER:
   case uSHOST:  uri_host = uri.substr(p1+1, pos-p1-1); break;
   case uSPORT:  uri_port = uri.substr(p1+1, pos-p1-1); break;
   case uSHDR:   uri_headers = uri.substr(p1+1, pos-p1-1); break;
@@ -377,6 +372,18 @@ bool AmUriParser::parse_params(const string& line, int& pos) {
 bool AmUriParser::parse_contact(const string& line, size_t pos, size_t& end) {
   int p0 = skip_name(line, pos);
   if (p0 < 0) { return false; }
+  if ((size_t)p0 > pos) {
+    // save display name
+    size_t dn_b = pos; size_t dn_e = p0;
+    while (dn_b < line.size() && line[dn_b] == ' ') { dn_b++; } // skip leading WS
+    while (dn_e > 0 && line[dn_e-1] == ' ') dn_e--; // skip trailing WS
+    if (dn_e > dn_b) {
+      if (line[dn_e-1] == '"' && line[dn_b] == '"') {
+	dn_b++; dn_e--; // skip quotes
+      }
+      display_name = line.substr(dn_b, dn_e - dn_b);
+    }
+  }
   int p1 = skip_uri(line, p0);
   if (p1 < 0) { return false; }
   //  if (p1 < 0) return false;
@@ -387,16 +394,87 @@ bool AmUriParser::parse_contact(const string& line, size_t pos, size_t& end) {
   return true;
 }
 
-void AmUriParser::dump() {
+string AmUriParser::add_param_to_param_list(const string& param_name,
+	    const string& param_value, const string& param_list)
+{
+  string list_of_params(param_list);
+
+  string param = param_name;
+  if (!param_value.empty())
+    param += "=" + param_value;
+
+  // if param_string empty - set it
+  if (list_of_params.empty()) {
+    list_of_params = param;
+  }
+  else {
+    // check if parameter already exists; if yes - replace it
+
+    size_t start = 0, end = 0, eq = 0, length = 0;
+    bool replaced = false;
+
+    do {
+      // get next param
+      end = list_of_params.find_first_of(';', start);
+
+      length = (end == string::npos) ? list_of_params.size() - start : end - start;
+
+      // it the param empty?
+      eq = list_of_params.substr(start, length).find('=');
+
+      if (eq != string::npos) { // non-empty param found
+        if (list_of_params.substr(start, eq) == param_name) {
+          list_of_params.replace(start, length, param);
+          replaced = true;
+          break;
+        }
+      }
+      else { // empty param found
+        if (list_of_params.substr(start, length) == param_name) {
+          list_of_params.replace(start, length, param);
+          replaced = true;
+          break;
+        }
+      }
+
+      start = end + 1;
+    }
+    while (end != string::npos && start != string::npos);
+
+    // if parameter doesn't exist - append it
+    if (!replaced)
+      list_of_params.append(";" + param);
+  }
+  return list_of_params;
+}
+
+void AmUriParser::add_user_param(const string& param_name, const string& param_value)
+{
+  size_t begin = uri_user.find_first_of(';');
+
+  if (begin == string::npos) {
+    uri_user += ";" + param_name;
+    if (!param_value.empty()) uri_user += "=" + param_value;
+  }
+  else {
+    uri_user = uri_user.substr(0, begin) + ";" +
+        add_param_to_param_list(param_name, param_value, uri_user.substr(begin + 1));
+  }
+}
+
+
+void AmUriParser::dump() const {
   DBG("--- Uri Info --- \n");
-  DBG(" uri       '%s'\n", uri.c_str());
-  DBG(" uri_user  '%s'\n", uri_user.c_str());
-  DBG(" uri_host  '%s'\n", uri_host.c_str());
-  DBG(" uri_port  '%s'\n", uri_port.c_str());
-  DBG(" uri_hdr   '%s'\n", uri_headers.c_str());
-  DBG(" uri_param '%s'\n", uri_param.c_str());
-  for (map<string, string>::iterator it = params.begin(); 
+  DBG(" uri           '%s'\n", uri.c_str());
+  DBG(" display_name  '%s'\n", display_name.c_str());
+  DBG(" uri_user      '%s'\n", uri_user.c_str());
+  DBG(" uri_host      '%s'\n", uri_host.c_str());
+  DBG(" uri_port      '%s'\n", uri_port.c_str());
+  DBG(" uri_hdr       '%s'\n", uri_headers.c_str());
+  DBG(" uri_param     '%s'\n", uri_param.c_str());
+  for (map<string, string>::const_iterator it = params.begin(); 
        it != params.end(); it++) {
+
     if (it->second.empty())
       DBG(" param     '%s'\n", it->first.c_str());
     else
@@ -404,3 +482,51 @@ void AmUriParser::dump() {
   }
   DBG("-------------------- \n");
 }
+
+string AmUriParser::uri_str() const
+{
+  string res = canon_uri_str();
+
+  if(!uri_param.empty()) {
+    res += ";" + uri_param;
+  }
+
+  return res;
+}
+
+string AmUriParser::canon_uri_str() const
+{
+  string res = "sip:";
+  if(!uri_user.empty()) {
+    res += uri_user + "@";
+  }
+  res += uri_host;
+
+  if(!uri_port.empty()) {
+    res += ":" + uri_port;
+  }
+
+  return res;
+}
+
+string AmUriParser::nameaddr_str() const
+{
+  string res = "<" + uri_str() + ">";
+
+  if(!display_name.empty())
+    res = "\"" + display_name + "\" " + res;
+
+  for (map<string, string>::const_iterator it = params.begin(); 
+       it != params.end(); it++) {
+
+    res += ";"+it->first;
+    if (!it->second.empty())
+      res += "="+it->second;
+  }
+
+  return res;
+}
+
+string AmUriParser::print() {
+  return nameaddr_str();
+}
diff --git a/core/AmUriParser.h b/core/AmUriParser.h
index 107e0a3..8bca2e8 100644
--- a/core/AmUriParser.h
+++ b/core/AmUriParser.h
@@ -40,9 +40,10 @@ struct AmUriParser {
   string uri_host; 
   string uri_port; 
   string uri_headers;
-  string uri_param;
+  string uri_param;		// <sip:user@host;uri_param>
+                                // <sip:user;user_param@host>
 
-  map<string, string> params;
+  map<string, string> params; 	// <sip:user;@host>;params
 
   bool isEqual(const AmUriParser& c) const;
   /** @return true on success */
@@ -50,8 +51,21 @@ struct AmUriParser {
   /** @return true on success */
   bool parse_uri();
   bool parse_params(const string& line, int& pos);
-  void dump();
+
+  /** param_string is semicolon separated list of parameters with or without value.
+   * method can be used to add/replace param for uri and user parameters */
+  static string add_param_to_param_list(const string& param_name,
+	    const string& param_value, const string& param_list);
+  void add_user_param(const string& param_name, const string& param_value);
+
+  void dump() const;
+  string uri_str() const;
+  string canon_uri_str() const;
+  string nameaddr_str() const;
+  
   AmUriParser() { }
+
+  string print();
 };
 
 #endif
diff --git a/core/tests/sems_tests.cpp b/core/tests/sems_tests.cpp
index 1c3a1bc..8483d10 100644
--- a/core/tests/sems_tests.cpp
+++ b/core/tests/sems_tests.cpp
@@ -25,6 +25,7 @@ FCT_BGN() {
   FCTMF_SUITE_CALL(test_auth);
   FCTMF_SUITE_CALL(test_headers);
   FCTMF_SUITE_CALL(test_jsonarg);
+  FCTMF_SUITE_CALL(test_uriparser);
 } FCT_END();
 
 
diff --git a/core/tests/test_uriparser.cpp b/core/tests/test_uriparser.cpp
new file mode 100644
index 0000000..8235665
--- /dev/null
+++ b/core/tests/test_uriparser.cpp
@@ -0,0 +1,114 @@
+#include "fct.h"
+
+#include "log.h"
+
+#include "AmSipHeaders.h"
+#include "AmSipMsg.h"
+#include "AmUtils.h"
+#include "AmUriParser.h"
+
+FCTMF_SUITE_BGN(test_uriparser) {
+
+    FCT_TEST_BGN(uriparser_simple) {
+      AmUriParser p;
+      size_t end;
+      fct_chk( p.parse_contact("sip:u@d", 0, end) );
+      fct_chk( p.uri_user=="u");
+      fct_chk( p.uri_host=="d");
+    } FCT_TEST_END();
+
+    FCT_TEST_BGN(uriparser_angle) {
+      AmUriParser p;
+      size_t end;
+      fct_chk( p.parse_contact("<sip:u@d>", 0, end) );
+      fct_chk( p.uri_user=="u");
+      fct_chk( p.uri_host=="d");
+    } FCT_TEST_END();
+
+    FCT_TEST_BGN(uriparser_angle_param) {
+      AmUriParser p;
+      size_t end;
+      fct_chk( p.parse_contact("<sip:u@d>;tag=123", 0, end) );
+      fct_chk( p.uri_user=="u");
+      fct_chk( p.uri_host=="d");
+      fct_chk( p.params["tag"]=="123");
+    } FCT_TEST_END();
+
+    FCT_TEST_BGN(uriparser_uri_param) {
+      AmUriParser p;
+      size_t end;
+      fct_chk( p.parse_contact("<sip:u@d;tag=123>", 0, end) );
+      fct_chk( p.uri_user=="u");
+      fct_chk( p.uri_host=="d");
+      fct_chk( p.uri_param=="tag=123");
+    } FCT_TEST_END();
+
+    FCT_TEST_BGN(uriparser_params_nobracket) {
+      AmUriParser p;
+      size_t end;
+      fct_chk( p.parse_contact("sip:u@d;tag=123", 0, end) );
+      fct_chk( p.uri_user=="u");
+      fct_chk( p.uri_host=="d");
+      fct_chk( p.params["tag"]=="123");
+    } FCT_TEST_END();
+
+    FCT_TEST_BGN(uriparser_params_dname) {
+      AmUriParser p;
+      size_t end;
+      fct_chk( p.parse_contact("hu <sip:u@d;tag=123>", 0, end) );
+      // DBG("DN:: '%s'\n", p.display_name.c_str());
+      fct_chk( p.display_name=="hu");
+      fct_chk( p.uri_user=="u");
+      fct_chk( p.uri_host=="d");
+    } FCT_TEST_END();
+
+    FCT_TEST_BGN(uriparser_params_dname2) {
+      AmUriParser p;
+      size_t end;
+      fct_chk( p.parse_contact("  hu bar <sip:u@d;tag=123>", 0, end) );
+      // DBG("DN:: '%s'\n", p.display_name.c_str());
+
+      fct_chk( p.display_name=="hu bar");
+      fct_chk( p.uri_user=="u");
+      fct_chk( p.uri_host=="d");
+    } FCT_TEST_END();
+
+    FCT_TEST_BGN(uriparser_params_dname3) {
+      AmUriParser p;
+      size_t end;
+      fct_chk( p.parse_contact("  \"hu bar\" <sip:u@d;tag=123>", 0, end) );
+      fct_chk( p.display_name=="hu bar");
+      fct_chk( p.uri_user=="u");
+      fct_chk( p.uri_host=="d");
+    } FCT_TEST_END();
+
+    FCT_TEST_BGN(uriparser_params_dname4) {
+      AmUriParser p;
+      size_t end;
+      fct_chk( p.parse_contact("  \"hu bar\\\\ \" <sip:u@d;tag=123>", 0, end) );
+      fct_chk( p.display_name=="hu bar\\\\ ");
+      fct_chk( p.uri_user=="u");
+      fct_chk( p.uri_host=="d");
+    } FCT_TEST_END();
+
+    FCT_TEST_BGN(uriparser_params_dname4) {
+      AmUriParser p;
+      size_t end;
+      fct_chk(p.parse_contact("\"Mr. Watson\" <mailto:watson@bell-telephone.com> ;q=0.1", 0, end));
+      fct_chk( p.display_name=="Mr. Watson");
+      fct_chk( p.uri_user=="watson");
+      fct_chk( p.uri_host=="bell-telephone.com");
+    } FCT_TEST_END();
+
+    FCT_TEST_BGN(uriparser_headers) {
+      AmUriParser p;
+      size_t end;
+      fct_chk(p.parse_contact("\"Mr. Watson\" <mailto:watson@bell-telephone.com?Replaces:%20lkancskjd%3Bto-tag=3123141ab%3Bfrom-tag=kjhkjcsd> ;q=0.1", 0, end));
+      fct_chk( p.display_name=="Mr. Watson");
+      fct_chk( p.uri_user=="watson");
+      fct_chk( p.uri_host=="bell-telephone.com");
+      fct_chk( p.uri_headers=="Replaces:\%20lkancskjd%3Bto-tag=3123141ab%3Bfrom-tag=kjhkjcsd");
+    } FCT_TEST_END();
+
+
+} FCTMF_SUITE_END();
diff --git a/core/tests/test_uriparser.h b/core/tests/test_uriparser.h
new file mode 100644
index 0000000..e69de29
-- 
1.7.10.4

