From e2ffc89f22900c3916a4a02df075f573d82ebab6 Mon Sep 17 00:00:00 2001
From: Stefan Sayer <stefan.sayer@googlemail.com>
Date: Mon, 16 Apr 2012 16:58:58 +0200
Subject: [PATCH] DSM: mod_xml: libxml logging to SEMS log, added
 xml.setLogLevel function

---
 apps/dsm/mods/mod_xml/ModXml.cpp |   48 ++++++++++++++++++++++++++++++++++++--
 apps/dsm/mods/mod_xml/ModXml.h   |    1 +
 doc/dsm/mods/Readme.mod_xml.txt  |    4 +++-
 3 files changed, 50 insertions(+), 3 deletions(-)

diff --git a/apps/dsm/mods/mod_xml/ModXml.cpp b/apps/dsm/mods/mod_xml/ModXml.cpp
index b33435a..534971f 100644
--- a/apps/dsm/mods/mod_xml/ModXml.cpp
+++ b/apps/dsm/mods/mod_xml/ModXml.cpp
@@ -34,10 +34,16 @@
 
 SC_EXPORT(MOD_CLS_NAME);
 
+void xml_err_func(void *ctx, const char *msg, ...);
+xmlGenericErrorFunc handler = (xmlGenericErrorFunc)xml_err_func;
+int xml_log_level = L_ERR;
+
 int MOD_CLS_NAME::preload() {
   DBG("initializing libxml2...\n");
   xmlInitParser();
-
+  initGenericErrorDefaultFunc(&handler);
+  handler = (xmlGenericErrorFunc)xml_err_func;
+  xmlSetGenericErrorFunc(NULL, &xml_err_func);
   return 0;
 }
 
@@ -48,6 +54,8 @@ MOD_ACTIONEXPORT_BEGIN(MOD_CLS_NAME) {
   DEF_CMD("xml.evalXPath", MODXMLEvalXPathAction);
   DEF_CMD("xml.XPathResultCount", MODXMLXPathResultNodeCount);
 
+  DEF_CMD("xml.setLoglevel", MODXMLSetLogLevelAction);
+
 } MOD_ACTIONEXPORT_END;
 
 MOD_CONDITIONEXPORT_NONE(MOD_CLS_NAME);
@@ -70,6 +78,17 @@ ModXmlXPathObj::~ModXmlXPathObj() {
   }
 }
 
+#define TMP_BUF_SIZE 256
+void xml_err_func(void *ctx, const char *msg, ...) {
+   char _string[TMP_BUF_SIZE];
+   va_list arg_ptr;
+   va_start(arg_ptr, msg);
+   vsnprintf(_string, TMP_BUF_SIZE, msg, arg_ptr);
+   va_end(arg_ptr);
+
+   _LOG(xml_log_level, "%s", _string);
+}
+
 CONST_ACTION_2P(MODXMLParseSIPMsgBodyAction, ',', false);
 EXEC_ACTION_START(MODXMLParseSIPMsgBodyAction) {
   string msgbody_var = resolveVars(par1, sess, sc_sess, event_params);
@@ -95,6 +114,8 @@ EXEC_ACTION_START(MODXMLParseSIPMsgBodyAction) {
     EXEC_ACTION_STOP;
   }
 
+  xmlSetGenericErrorFunc(NULL, &xml_err_func);
+
   xmlDocPtr doc =
     xmlReadMemory((const char*)b, strlen(b), "noname.xml", NULL, 0);
   if (doc == NULL) {
@@ -104,6 +125,8 @@ EXEC_ACTION_START(MODXMLParseSIPMsgBodyAction) {
     EXEC_ACTION_STOP;
   }
 
+  xmlSetGenericErrorFunc(doc, &xml_err_func);
+
   ModXmlDoc* xml_doc = new ModXmlDoc(doc);
   sc_sess->avar[dstname] = xml_doc;
   DBG("parsed XML body document to '%s'\n", dstname.c_str());
@@ -116,6 +139,8 @@ EXEC_ACTION_START(MODXMLParseAction) {
   string xml_doc = resolveVars(par1, sess, sc_sess, event_params);
   string dstname = resolveVars(par2, sess, sc_sess, event_params);
 
+  xmlSetGenericErrorFunc(NULL, &xml_err_func);
+
   xmlDocPtr doc =
     xmlReadMemory(xml_doc.c_str(), xml_doc.length(), "noname.xml", NULL, 0);
   if (doc == NULL) {
@@ -124,6 +149,7 @@ EXEC_ACTION_START(MODXMLParseAction) {
     sc_sess->SET_STRERROR("failed parsing XML document from " + xml_doc);
     EXEC_ACTION_STOP;
   }
+  xmlSetGenericErrorFunc(doc, &xml_err_func);
 
   ModXmlDoc* xml_doc_var = new ModXmlDoc(doc);
   sc_sess->avar[dstname] = xml_doc_var;
@@ -155,6 +181,8 @@ EXEC_ACTION_START(MODXMLEvalXPathAction) {
   string xpath_expr  = resolveVars(par1, sess, sc_sess, event_params);
   string xml_doc_var = resolveVars(par2, sess, sc_sess, event_params);
 
+  xmlSetGenericErrorFunc(NULL, &xml_err_func);
+
   ModXmlDoc* xml_doc = getXMLElemFromVariable<ModXmlDoc>(sc_sess, xml_doc_var);
   if (NULL == xml_doc)
     EXEC_ACTION_STOP;
@@ -168,6 +196,7 @@ EXEC_ACTION_START(MODXMLEvalXPathAction) {
     sc_sess->SET_STRERROR("unable to create new XPath context");
     EXEC_ACTION_STOP;
   }
+  xmlSetGenericErrorFunc(xpathCtx, &xml_err_func);
 
   string xml_doc_ns = sc_sess->var[xml_doc_var+".ns"];
   vector<string> ns_entries = explode(xml_doc_ns, " ");
@@ -210,7 +239,6 @@ EXEC_ACTION_START(MODXMLEvalXPathAction) {
 
 } EXEC_ACTION_END;
 
-
 CONST_ACTION_2P(MODXMLXPathResultNodeCount, '=', false);
 EXEC_ACTION_START(MODXMLXPathResultNodeCount) {
   string cnt_var  = par1;
@@ -235,3 +263,19 @@ EXEC_ACTION_START(MODXMLXPathResultNodeCount) {
   DBG("set count $%s=%u\n", cnt_var.c_str(), res);
   
 } EXEC_ACTION_END;
+
+EXEC_ACTION_START(MODXMLSetLogLevelAction) {
+  string xml_log_level_s = resolveVars(arg, sess, sc_sess, event_params);
+  if (xml_log_level_s == "error")
+    xml_log_level = L_ERR;
+  else if (xml_log_level_s == "warn")
+    xml_log_level = L_WARN;
+  else if (xml_log_level_s == "info")
+    xml_log_level = L_INFO;
+  else if (xml_log_level_s == "debug")
+    xml_log_level = L_DBG;
+  else {
+    ERROR("script writer error: '%s' is no valid log level (error, warn, info, debug)\n",
+	  xml_log_level_s.c_str());
+  }
+} EXEC_ACTION_END;
diff --git a/apps/dsm/mods/mod_xml/ModXml.h b/apps/dsm/mods/mod_xml/ModXml.h
index 56e8e85..f5da41d 100644
--- a/apps/dsm/mods/mod_xml/ModXml.h
+++ b/apps/dsm/mods/mod_xml/ModXml.h
@@ -47,6 +47,7 @@ DEF_ACTION_2P(MODXMLParseSIPMsgBodyAction);
 DEF_ACTION_2P(MODXMLParseAction);
 DEF_ACTION_2P(MODXMLEvalXPathAction);
 DEF_ACTION_2P(MODXMLXPathResultNodeCount);
+DEF_ACTION_1P(MODXMLSetLogLevelAction);
 
 class ModXmlDoc 
 : public DSMDisposable,
diff --git a/doc/dsm/mods/Readme.mod_xml.txt b/doc/dsm/mods/Readme.mod_xml.txt
index 5985449..d096e81 100644
--- a/doc/dsm/mods/Readme.mod_xml.txt
+++ b/doc/dsm/mods/Readme.mod_xml.txt
@@ -27,4 +27,6 @@ xml.XPathResultCount($cntvar=xpath_object)
   Example:
     xml.XPathResultCount($rescnt="substatus.xpath");
 
-
+xml.setLoglevel(level)
+ set libxml2 error logging level. Default: error
+ Valid: error, warn, info, debug
-- 
1.7.10.4

